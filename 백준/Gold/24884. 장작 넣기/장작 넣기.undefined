#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    ll w = 0, t = 0;
    cin >> w >> t >> k;
    vector<ll>v(n + 1);
    for (int i = 0; i < n; i++) {
        cin >> v[i];
    }
    ll result = 0;
    function<void(ll, ll, ll)> dfs = [&](ll a, ll b, ll c) -> void {
        vector<ll>vv(n + 1, 0);
        for (int i = 0; i < n; i++) {
            if (i != c) {
                ll count = 0;
                if (i - 1 >= 0 && v[i - 1] > 0) {
                    count++;
                }
                if (i + 1 < n && v[i + 1] > 0) {
                    count++;
                }
                vv[i] = 3 - count;
            }
        }
        for (int i = 0; i < n; i++) {
            v[i] -= vv[i];
        }
        if (b == t) {
            ll count = 0;
            for (int i = 0; i < n; i++) {
                if (v[i] > 0) {
                    count++;
                }
            }
            if (count >= k) {
                result++;
            }
            for (int i = 0; i < n; i++) {
                v[i] += vv[i];
            }
            return;
        }
        dfs(a, b + 1, a);
        if (a - 1 >= 0) {
            dfs(a - 1, b + 1, a - 1);
        }
        if (a + 1 < n) {
            dfs(a + 1, b + 1, a + 1);
        }
        for (int i = 0; i < n; i++) {
            v[i] += vv[i];
        }
        };
    dfs(w, 1, -1);
    cout << result;
    return 0;
}