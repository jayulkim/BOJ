#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    ll num = 0;
    cin >> num;
    while (num--) {
        cin >> n;
        ll x = 0, y = 0;
        cin >> x >> y;
        vector<pll>v;
        v.push_back({ x, y });
        for (int i = 0; i < n; i++) {
            ll a = 0, b = 0;
            cin >> a >> b;
            v.push_back({ a, b });
        }
        ll aa = 0, bb = 0;
        cin >> aa >> bb;
        v.push_back({ aa, bb });
        vector<vector<ll>>graph(n + 2);
        for (int i = 0; i < n + 1; i++) {
            for (int j = i + 1; j < n + 2; j++) {
                if (llabs(v[i].first - v[j].first) + llabs(v[i].second - v[j].second) <= 1000) {
                    graph[i].push_back(j);
                    graph[j].push_back(i);
                }
            }
        }
        vector<bool>visited(n + 2, false);
        queue<ll>q;
        q.push(0);
        bool find = false;
        while (!q.empty()) {
            ll temp = q.front();
            q.pop();
            if (temp == n + 1) {
                cout << "happy" << '\n';
                find = true;
                break;
            }
            visited[temp] = true;
            for (auto& i : graph[temp]) {
                if (!visited[i]) {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
        if (!find) {
            cout << "sad" << '\n';
        }
    }
    return 0;
}