#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    vector<ll>v(n + 1);
    vector<ll>parent(300001);
    vector<ll>root(300001, -1);
    vector<ll>rank(300001, 1);
    auto getparent = [&](auto&& self, ll x) -> ll {
        if (x == parent[x]) {
            return x;
        }
        return parent[x] = self(self, parent[x]);
        };
    auto merge = [&](auto&& self, ll a, ll b) -> void {
        a = getparent(getparent, a);
        b = getparent(getparent, b);
        if (rank[a] > rank[b]) {
            rank[a] += rank[b];
            rank[b] = 0;
            parent[b] = a;
        }
        else {
            rank[b] += rank[a];
            rank[a] = 0;
            parent[a] = b;
        }
        };
    iota(parent.begin(), parent.end(), 0);
    for (int i = 1; i <= n; i++) {
        cin >> v[i];
        if (root[v[i]] == -1) {
            root[v[i]] = i;
        }
        else {
            merge(merge, root[v[i]], i);
        }
    }
    cin >> m;
    for (int i = 0; i < m; i++) {
        ll a = 0, b = 0, c = 0;
        cin >> a;
        if (a == 1) {
            cin >> b >> c;
            if (root[b] == -1) {
                continue;
            }
            if (root[c] != -1 && getparent(getparent, root[b]) != getparent(getparent, root[c])) {
                merge(merge, root[b], root[c]);
            }
            root[c] = getparent(getparent, root[b]);
            if (b != c) {
                root[b] = -1;
            }
            v[root[c]] = c;
        }
        else {
            cin >> b;
            cout << v[getparent(getparent, b)] << '\n';
        }
    }
    return 0;
}