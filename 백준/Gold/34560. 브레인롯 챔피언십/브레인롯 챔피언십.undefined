#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<string, ll, ll, ll> slll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    vector<slll>v;
    for (int i = 0; i < n; i++) {
        string a = "";
        ll b = 0, c = 0, d = 0;
        cin >> a >> b >> c >> d;
        v.push_back({ a, b, c, d });
    }
    vector<ll>degree(n + 1, 0);
    vector<vector<ll>>graph(n + 1);
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            auto [a, b, c, d] = v[i];
            auto [e, f, g, h] = v[j];
            ll counta = 0, countb = 0;
            if (b > f) {
                counta++;
            }
            else if (b < f) {
                countb++;
            }
            if (c > g) {
                counta++;
            }
            else if (c < g) {
                countb++;
            }
            if (d > h) {
                counta++;
            }
            else if (d < h) {
                countb++;
            }
            if (counta > countb) {
                graph[i].push_back(j);
                degree[j]++;
            }
            else if (counta < countb) {
                graph[j].push_back(i);
                degree[i]++;
            }
        } 
    }
    vector<string>result;
    queue<ll>q;
    for (int i = 0; i < n; i++) {
        if (!degree[i]) {
            result.push_back(get<0>(v[i]));
            q.push(i);
        }
    }
    vector<bool>visited(n + 1, false);
    while (!q.empty()) {
        ll temp = q.front();
        q.pop();
        visited[temp] = true;
        for (auto& i : graph[temp]) {
            if (--degree[i] == 0) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            cout << "Paradoxe Absurdo";
            return 0;
        }
    }
    sort(result.begin(), result.end());
    for (auto& i : result) {
        cout << i << '\n';
    }
    return 0;
}