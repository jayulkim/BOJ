#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<string, ll, ll, ll> slll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    vector<string>vv(n + 1);
    vector<vector<ll>>v(n + 1, vector<ll>(3));
    for (int i = 0; i < n; i++) {
        cin >> vv[i] >> v[i][0] >> v[i][1] >> v[i][2];
    }
    vector<ll>degree(n + 1, 0);
    vector<vector<ll>>graph(n + 1);
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            ll counta = 0, countb = 0;
            for (int k = 0; k < 3; k++) {
                if (v[i][k] > v[j][k]) {
                    counta++;
                }
                else if (v[i][k] < v[j][k]) {
                    countb++;
                }
            }
            if (counta > countb) {
                graph[i].push_back(j);
                degree[j]++;
            }
            else if (counta < countb) {
                graph[j].push_back(i);
                degree[i]++;
            }
        } 
    }
    vector<string>result;
    queue<ll>q;
    for (int i = 0; i < n; i++) {
        if (!degree[i]) {
            result.push_back(vv[i]);
            q.push(i);
        }
    }
    ll count = n;
    while (!q.empty()) {
        ll temp = q.front();
        q.pop();
        count--;
        for (auto& i : graph[temp]) {
            if (--degree[i] == 0) {
                q.push(i);
            }
        }
    }
    if (count) {
        cout << "Paradoxe Absurdo";
        return 0;
    }
    sort(result.begin(), result.end());
    for (auto& i : result) {
        cout << i << '\n';
    }
    return 0;
}