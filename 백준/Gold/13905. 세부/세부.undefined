#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<string, ll, ll, ll> slll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    ll a = 0, b = 0;
    cin >> a >> b;
    vector<vector<pll>>graph(n + 1);
    for (int i = 0; i < m; i++) {
        ll a = 0, b = 0, c = 0;
        cin >> a >> b >> c;
        graph[a].push_back({ b, c });
        graph[b].push_back({ a, c });
    }
    ll start = 1, end = 1000000, mid = 0;
    ll Max = 0;
    while (start <= end) {
        mid = (start + end) / 2;
        vector<bool>visited(n + 1, false);
        queue<ll>q;
        q.push(a);
        while (!q.empty()) {
            ll temp = q.front();
            q.pop();
            visited[temp] = true;
            for (auto& i : graph[temp]) {
                if (!visited[i.first] && i.second >= mid) {
                    visited[i.first] = true;
                    q.push(i.first);
                }
            }
        }
        if (visited[b]) {
            start = mid + 1;
            Max = max(Max, mid);
        }
        else {
            end = mid - 1;
        }
    }
    cout << Max;
    return 0;
}