#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<string, ll, ll, ll> slll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    ll aa = 0, bb = 0, cc = 0;
    ll y = 0, x = 0;
    cin >> y >> x;
    cin >> aa >> bb >> cc;
    ll endy = 0, endx = 0;
    ll Max = 0;
    vector<vector<ll>>Map(n + 1, vector<ll>(m + 1));
    vector<vector<ll>>dist(n + 1, vector<ll>(m + 1, LLONG_MAX));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> Map[i][j];
            if (Max < Map[i][j]) {
                Max = Map[i][j];
                endy = i;
                endx = j;
            }
        }
    }
    priority_queue<lll, vector<lll>, greater<lll>>pq;
    pq.push({ 0, y - 1, x - 1 });
    vector<vector<ll>>forward = { {-1, 0}, {1, 0}, {0, 1}, {0, -1} };
    dist[y - 1][x - 1] = 0;
    while (!pq.empty()) {
        auto [a, b, c] = pq.top();
        pq.pop();
        if (dist[b][c] >= a) {
            for (int i = 0; i < 4; i++) {
                ll dy = b + forward[i][0];
                ll dx = c + forward[i][1];
                ll weight = 0;
                if (dy >= 0 && dy < n && dx >= 0 && dx < m && llabs(Map[b][c] - Map[dy][dx]) <= cc) {
                    if (Map[b][c] == Map[dy][dx]) {
                        weight = 1;
                    }
                    else if (Map[b][c] > Map[dy][dx]) {
                        weight = bb * (Map[b][c] - Map[dy][dx]);
                    }
                    else {
                        weight = aa * (Map[dy][dx] - Map[b][c]);
                    }
                    if (dist[dy][dx] > dist[b][c] + weight) {
                        dist[dy][dx] = dist[b][c] + weight;
                        pq.push({ dist[dy][dx], dy, dx });
                    }
                }
            }
        }
    }
    if (dist[endy][endx] == LLONG_MAX) {
        cout << -1;
    }
    else {
        cout << dist[endy][endx];
    }
    return 0;
}