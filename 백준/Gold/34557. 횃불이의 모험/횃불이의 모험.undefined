#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    ll y = 0, x = 0;
    vector<vector<ll>>Map(n + 1, vector<ll>(n + 1));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> Map[i][j];
            if (Map[i][j] == 2) {
                y = i;
                x = j;
            }
        }
    }
    map<ll, ll>ev;
    ev['W'] = 0;
    ev['A'] = 1;
    ev['S'] = 2;
    ev['D'] = 3;
    vector<vector<ll>>forward = { {-1, 0}, {0, -1}, {1, 0}, {0, 1} };
    vector<string>v;
    for (int i = 0; i < 4; i++) {
        string str = "";
        cin >> str;
        v.push_back(str);
    }
    string str = "";
    cin >> str;
    for (int i = 0; i < m; i++) {
        if (i - 1 >= 0) {
            if (str[i] != str[i - 1]) {
                ll a = ev[str[i]];
                ll b = ev[str[i - 1]];
                if (a > b) {
                    if (v[b] == "Up") {
                        ll dy = y + forward[b][0];
                        ll dx = x + forward[b][1];
                        if (dy >= 0 && dy < n && dx >= 0 && dx < n && Map[dy][dx] != 1) {
                            y = dy;
                            x = dx;
                        }
                    }
                    if (v[a] == "Down") {
                        ll dy = y + forward[a][0];
                        ll dx = x + forward[a][1];
                        if (dy >= 0 && dy < n && dx >= 0 && dx < n && Map[dy][dx] != 1) {
                            y = dy;
                            x = dx;
                        }
                    }
                }
                else {
                    if (v[a] == "Down") {
                        ll dy = y + forward[a][0];
                        ll dx = x + forward[a][1];
                        if (dy >= 0 && dy < n && dx >= 0 && dx < n && Map[dy][dx] != 1) {
                            y = dy;
                            x = dx;
                        }
                    }
                    if (v[b] == "Up") {
                        ll dy = y + forward[b][0];
                        ll dx = x + forward[b][1];
                        if (dy >= 0 && dy < n && dx >= 0 && dx < n && Map[dy][dx] != 1) {
                            y = dy;
                            x = dx;
                        }
                    }
                }
            }
            else if (str[i] == str[i - 1] && v[ev[str[i]]] == "Stay") {
                ll dy = y + forward[ev[str[i]]][0];
                ll dx = x + forward[ev[str[i]]][1];
                if (dy >= 0 && dy < n && dx >= 0 && dx < n && Map[dy][dx] != 1) {
                    y = dy;
                    x = dx;
                }
            }
        }
        else {
            if (v[ev[str[i]]] == "Down") {
                ll dy = y + forward[ev[str[i]]][0];
                ll dx = x + forward[ev[str[i]]][1];
                if (dy >= 0 && dy < n && dx >= 0 && dx < n && Map[dy][dx] != 1) {
                    y = dy;
                    x = dx;
                }
            }
        }
    }
    cout << y + 1 << ' ' << x + 1;
    return 0;
}