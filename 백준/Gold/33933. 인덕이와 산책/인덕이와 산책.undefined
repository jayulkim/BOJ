#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m >> k;
    vector<vector<ll>>graph(n + 1);
    for (int i = 0; i < m; i++) {
        ll a = 0, b = 0;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    vector<ll>v;
    for (int i = 0; i < k; i++) {
        ll num = 0;
        cin >> num;
        v.push_back(num);
    }
    vector<vector<vector<bool>>>visited(n + 1, vector<vector<bool>>(7001, vector<bool>(2, false)));
    queue<lll>q;
    q.push({ 1, 0, 0 });
    while (!q.empty()) {
        auto [a, b, c] = q.front();
        q.pop();
        if (a == n) {
            cout << b;
            return 0;
        }
        visited[a][b][c] = true;
        if (b + 1 < 7001 && v[b % v.size()] == a) {
            if (!visited[v[(b + 1) % v.size()]][b + 1][1]) {
                visited[v[(b + 1) % v.size()]][b + 1][1] = true;
                q.push({ v[(b + 1) % v.size()], b + 1, 1 });
            }
        }
        else {
            if (b + 1 < 7001 && !visited[a][b + 1][0]) {
                visited[a][b + 1][0] = true;
                q.push({ a, b + 1, 0 });
            }
            for (auto& i : graph[a]) {
                if (b + 1 < 7001 && !visited[i][b + 1][0]) {
                    visited[i][b + 1][0] = true;
                    q.push({ i, b + 1, 0 });
                }
            }
        }
    }
    cout << -1;
    return 0;
}