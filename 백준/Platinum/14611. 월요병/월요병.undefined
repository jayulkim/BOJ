#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    vector<vector<ll>>Map(n + 2, vector<ll>(m + 2, -1));
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> Map[i][j];
        }
    }
    vector<vector<ll>>forward = { {-1, 0}, {0, -1}, {1, 0}, {0, 1}, {1, 1}, {1, -1}, {-1, -1}, {-1, 1} };
    priority_queue<lll, vector<lll>, greater<lll>>pq;
    vector<vector<ll>>dist(n + 2, vector<ll>(m + 2, LLONG_MAX));
    for (int i = 2; i <= n + 1; i++) {
        pq.push({ 0, i, 0 });
        dist[i][0] = 0;
    }
    for (int i = 1; i <= m - 1; i++) {
        pq.push({ 0, n + 1, i });
        dist[n + 1][i] = 0;
    }
    for (int i = 2; i <= m + 1; i++) {
        Map[0][i] = -2;
    }
    for (int i = 1; i <= n - 1; i++) {
        Map[i][m + 1] = -2;
    }
    while (!pq.empty()) {
        auto [a, b, c] = pq.top();
        pq.pop();
        if (dist[b][c] >= a) {
            for (int i = 0; i < 8; i++) {
                ll dy = b + forward[i][0];
                ll dx = c + forward[i][1];
                if (dy >= 0 && dy <= n + 1 && dx >= 0 && dx <= m + 1 && Map[dy][dx] != -1) {
                    ll temp = 0;
                    if (Map[dy][dx] != -2) {
                        temp = Map[dy][dx];
                    }
                    if (dist[dy][dx] > dist[b][c] + temp) {
                        dist[dy][dx] = dist[b][c] + temp;
                        pq.push({ dist[dy][dx], dy, dx });
                    }
                }
            }
        }
    }
    ll Min = LLONG_MAX;
    for (int i = 2; i <= m + 1; i++) {
        Min = min(Min, dist[0][i]);
    }
    for (int i = 1; i <= n - 1; i++) {
        Min = min(Min, dist[i][m + 1]);
    }
    if (Min == LLONG_MAX) {
        cout << -1;
    }
    else {
        cout << Min;
    }
    return 0;
}