#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    ll mod = 1000000007;
    vector<ll>fac(n + 1, 1);
    for (ll i = 2; i <= n; i++) {
        fac[i] = ((fac[i - 1] % mod) * i) % mod;
    }
    vector<ll>v;
    vector<ll>vv;
    for (int i = 0; i < n; i++) {
        cin >> k;
        v.push_back(k);
    }
    for (int i = 0; i < m; i++) {
        cin >> k;
        vv.push_back(k);
    }
    sort(v.begin(), v.end());
    sort(vv.begin(), vv.end(), greater<ll>());
    ll Min = LLONG_MAX;
    for (int i = 0; i < n; i++) {
        if (i >= vv.size()) {
            Min = min(Min, v[i]);
        }
        else {
            Min = min(Min, v[i] + vv[i]);
        }
    }
    sort(vv.begin(), vv.end());
    ll result = 1;
    ll count = 0;
    for (int i = 0; i < n; i++) {
        if (v[i] < Min) {
            ll idx = lower_bound(vv.begin(), vv.end(), Min - v[i]) - vv.begin();
            result *= (m - idx - i) % mod;
            result %= mod;
        }
        else {
            m -= i;
            count = n - i;
            break;
        }
    }
    function<ll(ll, ll, ll)> addmod = [&](ll a, ll b, ll c) -> ll {
        if (a >= c - b) {
            return a - (c - b);
        }
        return a + b;
        };
    function<ll(ll, ll, ll)>mulmod = [&](ll a, ll b, ll c) -> ll {
        ll result = 0;
        while (b) {
            if (b % 2) {
                result = addmod(result, a, c);
            }
            a = addmod(a, a, c);
            b /= 2;
        }
        return result;
        };
    function<ll(ll, ll, ll)> powmod = [&](ll a, ll b, ll c) -> ll {
        ll result = 1;
        while (b) {
            if (b % 2) {
                result = mulmod(result, a, c);
            }
            a = mulmod(a, a, c);
            b /= 2;
        }
        return result;
        };
    ll temp = 1;
    for (int i = 1; i <= min(count, m); i++) {
        ll a = mulmod(fac[m], powmod(mulmod(fac[i], fac[m - i], mod), mod - 2, mod), mod);
        ll b = mulmod(fac[count], powmod(mulmod(fac[i], fac[count - i], mod), mod - 2, mod), mod);
        temp = addmod(temp, mulmod(mulmod(a, b, mod), fac[i], mod), mod);
    }
    cout << mulmod(result, temp, mod);
    return 0;
}