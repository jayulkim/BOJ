#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m >> k;
    vector<vector<ll>>graph(n + 1);
    vector<vector<ll>>v(n + 1);
    for (int i = 0; i < m; i++) {
        ll a = 0, b = 0;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    for (int i = 1; i <= n; i++) {
        sort(graph[i].begin(), graph[i].end());
    }
    vector<ll>rank(n + 1);
    vector<ll>degree(n + 1, 0);
    for (int i = 1; i <= n; i++) {
        cin >> rank[i];
    }
    k--;
    vector<ll>dp(n + 1, 0);
    queue<ll>q;
    ll start = 0;
    for (int i = 1; i <= n; i++) {
        if (rank[i] == 1) {
            q.push(i);
            start = i;
            dp[i] = k;
            break;
        }
    }
    vector<bool>visited(n + 1, false);
    while (!q.empty()) {
        ll temp = q.front();
        q.pop();
        visited[temp] = true;
        for (auto& i : graph[temp]) {
            if (rank[temp] < rank[i]) {
                v[temp].push_back(i);
                degree[i]++;
                if (!visited[i]) {
                    q.push(i);
                    visited[i] = true;
                }
            }
        }
    }
    vector<ll>child(n + 1);
    for (int i = 1; i <= n; i++) {
        cin >> child[i];
    }
    vector<ll>vidx(n + 1, 0);
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < v[i].size(); j++) {
            if (v[i][j] == child[i]) {
                vidx[i] = j;
                break;
            }
        }
    }
    q.push(start);
    while (!q.empty()) {
        ll temp = q.front();
        q.pop();
        if (child[temp] != -1) {
            ll a = dp[temp] / v[temp].size();
            ll b = dp[temp] % v[temp].size();
            for (auto& i : v[temp]) {
                dp[i] += a;
            }
            for (int i = 0; i < b; i++) {
                dp[v[temp][(vidx[temp] + i) % v[temp].size()]]++;
            }
            vidx[temp] += dp[temp];
            vidx[temp] %= v[temp].size();
        }
        for (auto& i : v[temp]) {
            if (--degree[i] == 0) {
                q.push(i);
            }
        }
    }
    q.push(start);
    while (!q.empty()) {
        ll temp = q.front();
        q.pop();
        if (child[temp] == -1) {
            cout << temp;
            break;
        }
        q.push(v[temp][vidx[temp]]);
    }
    return 0;
}