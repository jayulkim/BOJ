#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tuple<ll, ll, ll> lll;
typedef tuple<ll, ll, ll, ll> llll;
typedef tuple<ll, ll, vector<ll>> llv;
typedef pair<ll, ll> pll;
typedef pair<ll, string> pls;
ll n = 0, m = 0, k = 0;

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    priority_queue<lll>pq;
    vector<pll>v;
    for (int i = 0; i < n; i++) {
        ll a = 0, b = 0;
        cin >> a >> b;
        v.push_back({ a, b });
    }
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            pq.push({ (v[i].second + v[j].second) / llabs(v[i].first - v[j].first), i + 1, j + 1 });
        }
    }
    vector<ll>rank(n + 1, 1);
    vector<ll>parent(n + 1, 0);
    iota(parent.begin(), parent.end(), 0);
    function<ll(ll)> getparent = [&](ll x) -> ll {
        if (x == parent[x]) {
            return x;
        }
        return parent[x] = getparent(parent[x]);
        };
    function<void(ll, ll)> merge = [&](ll a, ll b) -> void {
        a = getparent(a);
        b = getparent(b);
        if (rank[a] > rank[b]) {
            parent[b] = a;
            rank[a] += rank[b];
            rank[b] = 0;
        }
        else {
            parent[a] = b;
            rank[b] += rank[a];
            rank[a] = 0;
        }
        };
    ll count = 0;
    ll result = 0;
    vector<vector<ll>>graph(n + 1);
    while (count < n - 1) {
        auto [a, b, c] = pq.top();
        pq.pop();
        if (getparent(b) != getparent(c)) {
            merge(b, c);
            result += a;
            count++;
            graph[b].push_back(c);
            graph[c].push_back(b);
        }
    }
    vector<bool>visited(n + 1, false);
    queue<ll>q;
    vector<pll>list;
    cout << result << '\n';
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            q.push(i);
            while (!q.empty()) {
                ll temp = q.front();
                q.pop();
                visited[temp] = true;
                for (auto& j : graph[temp]) {
                    if (!visited[j]) {
                        list.push_back({ temp, j });
                        visited[j] = true;
                        q.push(j);
                    }
                }
            }
        }
    }
    reverse(list.begin(), list.end());
    for (auto& i : list) {
        cout << i.first << ' ' << i.second << '\n';
    }
    return 0;
}